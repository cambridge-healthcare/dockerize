#!/usr/bin/env bash
set -e

export __exec="eval"

# Turn on debug mode, all commands are just dry runs, no action will be taken
case "$1" in
-d | --de* )
  echo "Running in debug mode, no commands will be executed"
  set -x
  export __exec="echo"
  shift
esac

if [ -z "$(type -p docker)" ]
then
  echo "Cannot find docker. Is docker installed and available in the PATH?"
  exit 1
fi

docker_version="$(dpkg -l lxc-docker | awk '/ii/ { print $3 }')"
docker_version_num="${docker_version//./}"
if [[ $docker_version_num < 065 ]]
then
  echo "docker v0.6.5 or newer required"
  exit 1
fi

export DOCKER_CIDS_DIR="${DOCKER_CIDS_DIR:-$HOME/.docker/cids}"
if [ ! -d "$DOCKER_CIDS_DIR" ]
then
  $__exec "mkdir -p $DOCKER_CIDS_DIR"
fi

export DOCKER_GITHUB_REPOS="${DOCKER_GITHUB_REPOS:-$HOME/.docker/github_repositories}"
if [ ! -d "$DOCKER_GITHUB_REPOS" ]
then
  $__exec "mkdir -p $DOCKER_GITHUB_REPOS"
fi

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

libexec_path="$(abs_dirname "$0")"
export _DOCKERIZE_ROOT="$(abs_dirname "$libexec_path")"
export PATH="${libexec_path}:$PATH"

command="$1"
case "$command" in
"" | -h | --he* )

  $__exec "dockerize-help"

  ;;
-v | --ve* )

  $__exec "echo 'dockerize v0.1.0'"

  ;;
* )

  command_path="$(command -v "dockerize-$command" || true)"
  shift

  if [ ! -x "$command_path" ]
  then
    command_path="$(command -v docker) $command"
  fi

  eval "$command_path $@"

  ;;
esac
